---
import { Icon } from 'astro-icon/components'
import { url } from '../../utils/url-utils'

interface Props {
  links: any[]
}

const links = Astro.props.links
---

<div id="nav-menu-panel" class="float-panel float-panel-closed fixed right-4 top-[4.5rem] px-2 py-2 w-40 bg-[var(--float-panel-bg)] rounded-2xl shadow-xl z-50">
  {links.map((link) => (
    <div class="flex flex-col">
      {link.items ? (
        <div
          class="menu-group flex justify-between items-center py-2 pl-3 pr-1 rounded-lg gap-2
                 font-bold text-black/75 dark:text-white/75 cursor-pointer
                 hover:bg-[var(--btn-plain-bg-hover)] active:bg-[var(--btn-plain-bg-active)]
                 hover:text-[var(--primary)] dark:hover:text-[var(--primary)]
                 transition-colors duration-100"
        >
          <div class="flex items-center gap-2">
            {link.icon && <Icon name={link.icon} class="text-[1.2rem] text-inherit transition-colors duration-0" />}
            <span class="transition-colors duration-0">{link.name}</span>
          </div>
          <Icon name="material-symbols:keyboard-arrow-down-rounded" class="link-arrow text-current transition-transform duration-100 " />
        </div>
      ) : (
        <a
          href={link.external ? link.url : url(link.url)} 
          class="flex justify-between items-center py-2 pl-3 pr-1 rounded-lg gap-2
                 font-bold text-black/75 dark:text-white/75
                 hover:bg-[var(--btn-plain-bg-hover)] active:bg-[var(--btn-plain-bg-active)]
                 hover:text-[var(--primary)] dark:hover:text-[var(--primary)]
                 transition-colors duration-100 "
          target={link.external ? "_blank" : undefined}
        >
          <div class="flex items-center gap-2">
            {link.icon && <Icon name={link.icon} class="text-[1.2rem] text-inherit transition-colors duration-0" />}
            <span class="transition-colors duration-0">{link.name}</span>
          </div>
          {link.external && (
            <Icon name="fa6-solid:arrow-up-right-from-square" class="text-[0.75rem] text-current -translate-x-1 transition-transform duration-0" />
          )}
        </a>
      )}

      {link.items && (
        <div class="ml-4 overflow-hidden max-h-0 submenu transition-all duration-200">
          {link.items.map((sub: any) => (
            <a
              href={sub.external ? sub.url : url(sub.url)} 
              target={sub.external ? "_blank" : undefined}
              class="flex items-center justify-between py-2 pl-4 pr-1 rounded-lg gap-2
                     font-medium text-black/75 dark:text-white/75
                     hover:bg-[var(--btn-plain-bg-hover)] hover:text-[var(--primary)] dark:hover:text-[var(--primary)]
                     transition-colors duration-100 "
            >
              <div class="flex items-center gap-2">
                {sub.icon && <Icon name={sub.icon} class="text-[1.2rem] text-inherit transition-colors duration-0" />}
                <span class="transition-colors duration-0">{sub.name}</span>
              </div>
              {sub.external && (
                <Icon name="fa6-solid:arrow-up-right-from-square" class="text-[0.75rem] text-current -translate-x-1 transition-transform duration-0" />
              )}
            </a>
          ))}
        </div>
      )}
    </div>
  ))}
</div>

<script>
  const groups = document.querySelectorAll('#nav-menu-panel .menu-group');

  for (const group of groups) {
    const arrow = group.querySelector('.link-arrow');
    const submenu = group.parentElement?.querySelector('.submenu');

    if (!arrow || !(submenu instanceof HTMLElement)) continue;

    group.addEventListener('click', () => {
      const isOpen = submenu.style.maxHeight;

      if (isOpen) {
        arrow.classList.remove('rotate-180');
        submenu.style.maxHeight = '';
      } else {
        arrow.classList.add('rotate-180');
        submenu.style.maxHeight = `${submenu.scrollHeight}px`;
      }
    });
  }
</script>